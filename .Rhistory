plot_productivity_decline(posterior = ric_chm_eca_ocean_covariates_logR, effect = "eca", species = "chum", model = "Ricker", by_river = FALSE))/(plot_productivity_decline(posterior = bh_chm_cpd_ocean_covariates, effect = "cpd", species = "chum", model = "BH", by_river = FALSE) +
plot_productivity_decline(posterior = bh_chm_eca_ocean_covariates, effect = "eca", species = "chum", model = "BH", by_river = FALSE)) + plot_layout(guides = "none"))
((plot_productivity_decline(posterior = ric_chm_cpd_ocean_covariates_logR, effect = "cpd", species = "chum", model = "Ricker", by_river = FALSE) +
plot_productivity_decline(posterior = ric_chm_eca_ocean_covariates_logR, effect = "eca", species = "chum", model = "Ricker", by_river = FALSE))/(plot_productivity_decline(posterior = bh_chm_cpd_ocean_covariates, effect = "cpd", species = "chum", model = "BH", by_river = FALSE) +
plot_productivity_decline(posterior = bh_chm_eca_ocean_covariates, effect = "eca", species = "chum", model = "BH", by_river = FALSE)) + plot_layout(guides = "collect"))
#save
ggsave(here("figures","presentation_june2025_chum_productivity_decline.png"), width = 11, height = 5)
#save
ggsave(here("figures","presentation_june2025_chum_productivity_decline.png"), width = 11, height = 8)
full_productivity
ric_chm_cpd_ocean_covariates_logR
posterior = ric_chm_cpd_ocean_covariates_logR
effect = "cpd"
if(species == "chum"){
df <- ch20rsc
df$sst.std <- (ch20rsc$spring_ersst-mean(ch20rsc$spring_ersst))/sd(ch20rsc$spring_ersst)
} else if(species == "pink"){
df <- pk10r
df$sst.std <- (pk10r$spring_ersst-mean(pk10r$spring_ersst))/sd(pk10r$spring_ersst)
}
if(effect == "eca"){
forestry <- seq(0,1,length.out=100)
b <- posterior %>% select(ends_with("b_for"))
forestry_sqrt <- sqrt(forestry)
forestry_sqrt_std = (forestry_sqrt-mean(forestry_sqrt))/sd(forestry_sqrt)
}else if(effect == "cpd"){
forestry <- seq(0,100,length.out=100)
b <- posterior %>% select(ends_with("b_for"))
forestry_sqrt <- sqrt(forestry)
forestry_sqrt_std = (forestry_sqrt-mean(forestry_sqrt))/sd(forestry_sqrt)
}else if(effect == "sst"){
forestry <- seq(10,15,length.out=100)
b <- posterior %>% select(ends_with("b_sst"))
forestry_sqrt_std = (forestry-mean(forestry))/sd(forestry)
}
no_forestry <- min(forestry_sqrt_std)
global_prediction <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,median)
global_025 <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,quantile,c(0.025),
row.names = c("q025"))
global_975 <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,quantile,c(0.975),
row.names = c("q975"))
global_df <- data.frame(forestry = forestry,
productivity_median = global_prediction,
q025 = global_025,
q975 = global_975)
full_productivity <- NULL
global_df
posterior = bh_chm_cpd_ocean_covariates
if(species == "chum"){
df <- ch20rsc
df$sst.std <- (ch20rsc$spring_ersst-mean(ch20rsc$spring_ersst))/sd(ch20rsc$spring_ersst)
} else if(species == "pink"){
df <- pk10r
df$sst.std <- (pk10r$spring_ersst-mean(pk10r$spring_ersst))/sd(pk10r$spring_ersst)
}
if(effect == "eca"){
forestry <- seq(0,1,length.out=100)
b <- posterior %>% select(ends_with("b_for"))
forestry_sqrt <- sqrt(forestry)
forestry_sqrt_std = (forestry_sqrt-mean(forestry_sqrt))/sd(forestry_sqrt)
}else if(effect == "cpd"){
forestry <- seq(0,100,length.out=100)
b <- posterior %>% select(ends_with("b_for"))
forestry_sqrt <- sqrt(forestry)
forestry_sqrt_std = (forestry_sqrt-mean(forestry_sqrt))/sd(forestry_sqrt)
}else if(effect == "sst"){
forestry <- seq(10,15,length.out=100)
b <- posterior %>% select(ends_with("b_sst"))
forestry_sqrt_std = (forestry-mean(forestry))/sd(forestry)
}
no_forestry <- min(forestry_sqrt_std)
global_prediction <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,median)
global_025 <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,quantile,c(0.025),
row.names = c("q025"))
global_975 <- apply(exp(as.matrix(b[,1])%*%
(forestry_sqrt_std-no_forestry))*100 - 100,2,quantile,c(0.975),
row.names = c("q975"))
global_df <- data.frame(forestry = forestry,
productivity_median = global_prediction,
q025 = global_025,
q975 = global_975)
global_df
plot_recruit_spawner_river(data = df, river_name = "VINER SOUND CREEK", species = "chum",
posterior = ric_chm_cpd_ocean_covariates_logR, posterior_bh = bh_chm_cpd_ocean_covariates
)
plot_forestry_effect_river_together <- function(posterior1 = bh_chm_eca_ersst,
posterior2 = ric_chm_eca_ersst,
river = "CARNATION CREEK",
effect = "eca",
species = "chum",
model1 = "BH",
model2 = "Ricker",
xlim = c(-2, 2)){
if(effect == "eca"){
x_name = "Standardized coefficients of ECA"
y_name = "Posterior density\nof ECA effect"
color_var = "eca_level"
color_name = "Max ECA level\nin River (%)"
scale_color = scale_color_manual(name = "Max ECA level\nin River (%)",
values = c('low' = '#35978f', 'medium' = 'gray', 'high' = '#bf812d'))
if(species == "chum"){
max_df = max_eca_df
max_df_river <- max_eca_df %>% filter(River == river)
} else if(species == "pink"){
max_df = max_eca_pink_df
max_df_river <- max_eca_pink_df %>% filter(River == river)
}
} else if(effect == "cpd"){
x_name = "Standardized coefficients of CPD"
y_name = "Posterior density\nof CPD effect"
color_var = "cpd_max"
color_name = "Max CPD\nin River (%)"
# scale_color = scale_color_gradient2(name = 'Max CPD\nin River (%)',
#                                     low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = 50)
#
if(species == "chum"){
max_df = max_cpd_df
max_df_river <- max_cpd_df %>% filter(River == river)
} else if(species == "pink"){
max_df = max_cpd_pink_df
max_df_river <- max_cpd_pink_df %>% filter(River == river)
}
if(max_df_river$cpd_max < 30){
scale_color = scale_color_manual(values = c('#35978f'))
} else if(max_df_river$cpd_max >= 30 & max_df_river$cpd_max < 60){
scale_color = scale_color_manual(values = c('gray'))
} else if(max_df_river$cpd_max >= 60){
scale_color = scale_color_manual(values = c('#bf812d'))
}
}
posterior_df <- posterior1 %>%
select(starts_with('b_for_rv')) %>%
pivot_longer(cols = everything(),
names_to = 'River',
names_prefix = 'b_for_rv',
values_to = effect) %>%
mutate(River_n = as.numeric(str_extract(River, '\\d+'))) %>%
select(-River) %>%
left_join(max_df, by = 'River_n')
posterior_df2 <- posterior2 %>%
select(starts_with('b_for_rv')) %>%
pivot_longer(cols = everything(),
names_to = 'River',
names_prefix = 'b_for_rv',
values_to = effect) %>%
mutate(River_n = as.numeric(str_extract(River, '\\d+'))) %>%
select(-River) %>%
left_join(max_df, by = 'River_n')
posterior_df_river1 <- posterior_df %>% filter(River == river) %>%
mutate(model = model1)
posterior_df_river2 <- posterior_df2 %>% filter(River == river) %>%
mutate(model = model2)
posterior_df_river <- posterior_df_river1 %>%
bind_rows(posterior_df_river2)
#color by river
plot1 <- ggplot() +
stat_density(data= posterior_df_river, aes(!!sym(effect),
group = model,
color = model,
fill = model),
geom = 'area', position = 'identity',
alpha = 0.4, linewidth = 0.8) +
geom_vline(xintercept = 0, color = 'slategray', linewidth = 0.8) +
labs(x = x_name, y = y_name) +
xlim(xlim[1], xlim[2]) +
scale_color_manual(name = "Model",
values = c("Ricker" = '#7F6A93',
"BH" = '#A2C5AC')) +
scale_fill_manual(name = "Model",
values = c("Ricker" = '#7F6A93',
"BH" = '#A2C5AC')) +
# scale_color +
# geom_density(aes(posterior$b_for), color = 'black', linewidth = 1.2, alpha = 0.2)+
#vline at the median value of the posterior
theme_classic()+
theme(legend.position = 'right',
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 14, hjust = 0.5)
)
return(plot1)
}
plot_recruit_spawner_river(data = df, river_name = "CARNATION CREEK", species = "chum",
posterior = ric_chm_cpd_ocean_covariates_logR, posterior_bh = bh_chm_cpd_ocean_covariates
)
ggsave
plot_recruit_spawner_river(data = df, river_name = "CARNATION CREEK", species = "chum",
posterior = ric_chm_cpd_ocean_covariates_logR, posterior_bh = bh_chm_cpd_ocean_covariates
)
ggsave(filename = here("figures","presentation_june2025_chum_recruit_spawner_carnation_creek.png"),
width = 11, height = 5, dpi = 300)
ggsave(filename = here("figures","presentation_june2025_chum_recruit_spawner_carnation_creek.png"),
width =8, height = 5, dpi = 300)
plot_recruit_spawner_river <- function(data, species = "chum", river_name,  posterior, posterior_bh, posterior_a_t, posterior_a_t_bh){
# river_data <- df %>% filter(River_n == river)
if(species == "chum"){
df <- ch20rsc
river_data <- ch20rsc %>% filter(River == river_name)
river <- river_data$River_n[1]
# df$sst.std <- (ch20rsc$spring_ersst-mean(ch20rsc$spring_ersst))/sd(ch20rsc$spring_ersst)
} else if(species == "pink"){
df <- pk10r
river_data <- pk10r %>% filter(River == river_name)
river <- river_data$River_n2[1]
# df$sst.std <- (pk10r$spring_ersst-mean(pk10r$spring_ersst))/sd(pk10r$spring_ersst)
}
if(species == "chum"){
posterior_rv_b_for <- posterior %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_alpha_j <- posterior %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_S_max <- posterior %>%
select(starts_with('Smax')) %>%
select(ends_with(paste0("[",river,"]")))
#bh
posterior_bh_rv_b_for <- posterior_bh %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh_rv_alpha_j <- posterior_bh %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh_rv_Rk <- posterior_bh %>%
select(starts_with('Rk')) %>%
select(ends_with(paste0("[",river,"]")))
} else if(species == "pink"){
river_wo_broodline <- river_data$River_n
river_w_broodline <- river_data$River_n2
posterior_rv_b_for <- posterior %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river_wo_broodline,"]")))
posterior_rv_alpha_j <- posterior %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river_w_broodline,"]")))
posterior_rv_S_max <- posterior %>%
select(starts_with('Smax')) %>%
select(ends_with(paste0("[",river_w_broodline,"]")))
#time varying productivity for ricker
# if(river_data$Broodline[1] == "Even"){
#
#   posterior_a_t_alpha_j <- posterior_a_t %>%
#   select(starts_with('alpha_j')) %>%
#   select(ends_with(paste0("[",river_w_broodline,"]")))
#
#   posterior_a_t_alpha_t <- posterior_a_t %>%
#   select(starts_with('alpha_t[1,'))
#
#   posterior_a_t_alpha_t_j_full <- matrix(posterior_a_t_alpha_j[,1], ncol = length(posterior_a_t_alpha_t), nrow = length(posterior_a_t_alpha_j[,1])) + posterior_a_t_alpha_t
#
#   posterior_a_t_alpha_t_j <- posterior_a_t_alpha_t_j_full %>%
#     pivot_longer(cols = everything(), names_to = "year", values_to = "alpha_t_odd") %>%
#     mutate(year = as.numeric(substring(year, 11, ifelse(nchar(year) == 12, 11, 12))) + 1953)
#
# } else if(river_data$Broodline[1] == "Odd"){
#
#
#   posterior_a_t_alpha_j <- posterior_a_t %>%
#   select(starts_with('alpha_j')) %>%
#   select(ends_with(paste0("[",river_w_broodline,"]")))
#
#   posterior_a_t_alpha_t <- posterior_a_t %>%
#   select(starts_with('alpha_t[2,'))
#
#   posterior_a_t_alpha_t_j_full <- matrix(posterior_a_t_alpha_j[,1], ncol = length(posterior_a_t_alpha_t), nrow = length(posterior_a_t_alpha_j[,1])) + posterior_a_t_alpha_t
#
#   posterior_a_t_alpha_t_j <- posterior_a_t_alpha_t_j_full %>%
#     pivot_longer(cols = everything(), names_to = "year", values_to = "alpha_t_odd") %>%
#     mutate(year = as.numeric(substring(year, 11, ifelse(nchar(year) == 12, 11, 12))) + 1953)
#
#
#
#
#
#
# }
#bh
posterior_bh_rv_b_for <- posterior_bh %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river_wo_broodline,"]")))
posterior_bh_rv_alpha_j <- posterior_bh %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river_w_broodline,"]")))
posterior_bh_rv_Rk <- posterior_bh %>%
select(starts_with('Rk')) %>%
select(ends_with(paste0("[",river_w_broodline,"]")))
}
spawners_predicted <- seq(0, max(river_data$Spawners), length.out = 100)
# calculate recruit prediction
low_cpd <- min(river_data$sqrt.CPD.std)
high_cpd <- max(river_data$sqrt.CPD.std)
# avg_cpd <- mean(river_data$sqrt.CPD.std)
mid_cpd <- min(river_data$sqrt.CPD.std) + (max(river_data$sqrt.CPD.std) - min(river_data$sqrt.CPD.std))/2
mid_cpd_real <- min(river_data$disturbedarea_prct_cs) + (max(river_data$disturbedarea_prct_cs) - min(river_data$disturbedarea_prct_cs))/2
recruits_predicted <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) -
as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
recruits_predicted_lower <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) - as.matrix(1/posterior_rv_S_max)%*%spawners_predicted), 2, quantile, c(0.025)))*spawners_predicted
recruits_predicted_upper <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) - as.matrix(1/posterior_rv_S_max)%*%spawners_predicted), 2, quantile, c(0.975)))*spawners_predicted
# if(low_cpd == high_cpd){
#   scale_color <- scale_color_manual(name = 'CPD in River (%)', values = c("black"))
#
# } else{
#    scale_color <- scale_color_gradient2(name = 'CPD in River (%)',
#                                     low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = 50)
# }
recruits_predicted_low_cpd <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) - as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*low_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
recruits_predicted_high_cpd <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) - as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*high_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
#make dataframe
prediction_df <- data.frame(spawners = spawners_predicted,
recruits = recruits_predicted,
recruits_lower = recruits_predicted_lower,
recruits_upper = recruits_predicted_upper,
recruits_low_cpd = recruits_predicted_low_cpd,
recruits_high_cpd = recruits_predicted_high_cpd,
log_RS = log(recruits_predicted/spawners_predicted))
recruits_bh_predicted <- exp(apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%spawners_predicted) + matrix(posterior_bh_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1]))), 2, median))*spawners_predicted
recruits_bh_predicted_lower <- exp(apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%spawners_predicted) + matrix(posterior_bh_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1]))), 2, quantile, c(0.025)))*spawners_predicted
recruits_bh_predicted_upper <- exp(apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%spawners_predicted) + matrix(posterior_bh_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1]))), 2, quantile, c(0.975)))*spawners_predicted
recruits_bh_predicted_low_cpd <- exp(apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%spawners_predicted) + matrix(posterior_bh_rv_b_for[,1]*low_cpd, ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1]))), 2, median))*spawners_predicted
recruits_bh_predicted_high_cpd <- exp(apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%spawners_predicted) + matrix(posterior_bh_rv_b_for[,1]*high_cpd, ncol = length(spawners_predicted), nrow = length(posterior_bh_rv_alpha_j[,1]))), 2, median))*spawners_predicted
prediction_bh_df <- data.frame(spawners = spawners_predicted,
recruits = recruits_bh_predicted,
recruits_lower = recruits_bh_predicted_lower,
recruits_upper = recruits_bh_predicted_upper,
recruits_low_cpd = recruits_bh_predicted_low_cpd,
recruits_high_cpd = recruits_bh_predicted_high_cpd,
log_RS = log(recruits_bh_predicted/spawners_predicted))
#plot the time varying productivity vs year, with log(R/S) data
#plot recruit vs spawner as points
p1 <- ggplot() +
geom_point(data = river_data,aes(x = Spawners, y = Recruits, color = disturbedarea_prct_cs), alpha = 0.5, size = 2) +
geom_line(data = prediction_df, aes(x = spawners, y = recruits_low_cpd), color = '#35978f', size = 1, alpha = 0.5) +
geom_line(data = prediction_df, aes(x = spawners, y = recruits_high_cpd), color = '#bf812d', size = 1, alpha = 0.5) +
geom_line(data = prediction_df, aes(x = spawners, y = recruits), color = "black", size = 1, alpha = 0.5) +
geom_ribbon(data = prediction_df, aes(x = spawners, ymin = recruits_lower, ymax = recruits_upper), fill = "gray", alpha = 0.5) +
#make y log scale
# scale_y_log10() +
labs(title = "Ricker", x = "Spawners", y = "Recruits") +
# scale_color_manual(name = "CPD", values = c("Low" = '#35978f', "High" = '#bf812d')) +
scale_color_gradient2(name = 'CPD in River (%)',
low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
theme_classic() +
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(1, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)
p2 <- ggplot(river_data) +
geom_point(aes(x = Spawners, y = Recruits, color = disturbedarea_prct_cs), alpha = 0.5, size = 2) +
#make y log scale
# scale_y_log10() +
geom_line(data = prediction_bh_df, aes(x = spawners, y = recruits_low_cpd), color = '#35978f', size = 1, alpha = 0.5) +
geom_line(data = prediction_bh_df, aes(x = spawners, y = recruits_high_cpd), color = '#bf812d', size = 1, alpha = 0.5) +
geom_line(data = prediction_bh_df, aes(x = spawners, y = recruits), color = "black", size = 1, alpha = 0.5) +
geom_ribbon(data = prediction_bh_df, aes(x = spawners, ymin = recruits_lower, ymax = recruits_upper), fill = "gray", alpha = 0.5) +
scale_color_gradient2(name = 'CPD in River (%)',
low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
labs(title = "BH", x = "Spawners", y = "Recruits") +
theme_classic() +
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(1, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)
# p3 log R/s vs spawners
p3 <- ggplot(river_data) +
geom_point(aes(x = Spawners, y = log(Recruits/Spawners), color = disturbedarea_prct_cs), alpha = 0.5, size = 2) +
geom_line(data = prediction_df, aes(x = spawners, y = log(recruits_predicted_low_cpd/spawners_predicted)), color = '#35978f', size = 1, alpha = 0.5) +
geom_line(data = prediction_df, aes(x = spawners, y = log(recruits_predicted_high_cpd/spawners_predicted)), color = '#bf812d', size = 1, alpha = 0.5) +
geom_line(data = prediction_df, aes(x = spawners, y = log_RS), color = "black", size = 1, alpha = 0.5) +
geom_ribbon(data = prediction_df, aes(x = spawners, ymin = log(recruits_predicted_lower/spawners_predicted), ymax = log(recruits_predicted_upper/spawners_predicted)), fill = "gray", alpha = 0.5) +
labs(#title = "Ricker model with CPD, NPGO, ERSST",
x = "Spawners", y = TeX(r"($\log \left(\frac{Recruits}{Spawners}\right)$)")) +
scale_color_gradient2(name = 'CPD in River (%)',
low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
theme_classic() +
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(1, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)
p4 <- ggplot(river_data) +
geom_point(aes(x = Spawners, y = log(Recruits/Spawners), color = disturbedarea_prct_cs), alpha = 0.5, size = 2) +
geom_line(data = prediction_bh_df, aes(x = spawners, y = log(recruits_bh_predicted_low_cpd/spawners_predicted)), color = '#35978f', size = 1, alpha = 0.5) +
geom_line(data = prediction_bh_df, aes(x = spawners, y = log(recruits_bh_predicted_high_cpd/spawners_predicted)), color = '#bf812d', size = 1, alpha = 0.5) +
geom_line(data = prediction_bh_df, aes(x = spawners, y = log_RS), color = "black", size = 1, alpha = 0.5) +
geom_ribbon(data = prediction_bh_df, aes(x = spawners, ymin = log(recruits_bh_predicted_lower/spawners_predicted), ymax = log(recruits_bh_predicted_upper/spawners_predicted)), fill = "gray", alpha = 0.5) +
labs(#title = "BH model with CPD, NPGO, ERSST",
x = "Spawners", y = TeX(r"($\log \left(\frac{Recruits}{Spawners}\right)$)")) +
# "log(Recruits/Spawners)") +
scale_color_gradient2(name = 'CPD in River (%)',
low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
theme_classic() +
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(1, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)
#
#
# # p5 residuals of ricker model vs predicted values of ricker model
#
# residual_df <- data.frame(spawners = river_data$Spawners,
#                           recruits = river_data$Recruits,
#                           observed_log_RS = river_data$ln_RS,
#                           predicted_log_RS = apply((matrix(posterior_rv_alpha_j[,1], ncol = length(river_data$Spawners), nrow = length(posterior_rv_alpha_j[,1])) - as.matrix(1/posterior_rv_S_max)%*%river_data$Spawners), 2, median),
#                           cpd = river_data$disturbedarea_prct_cs
# )
#
# residual_df$residuals <- residual_df$observed_log_RS - residual_df$predicted_log_RS
#
# p5 <- ggplot(residual_df)+
#   geom_point(aes(x = predicted_log_RS, y = residuals, color = cpd), alpha = 0.5, size = 2) +
#   geom_hline(yintercept = 0, color = 'black', linetype = 'dashed') +
#   labs(#title = "Ricker model with CPD, NPGO, ERSST",
#     x = TeX(r"(Predicted $\log \left(\frac{Recruits}{Spawners}\right)$)"),
#     y = "Residuals") +
#   scale_color_gradient2(name = 'CPD in River (%)',
#                                     low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
#   theme_classic() +
#   theme(legend.position = "right",
#         legend.key.width = unit(0.5, "cm"),
#         legend.key.height = unit(1, "lines"),
#         legend.text = element_text(size = 7),
#         legend.spacing.y = unit(0.001, "cm"),
#         axis.title.x = element_text(size = 12),
#         axis.title.y = element_text(size = 12),
#         axis.text.x = element_text(size = 12),
#         axis.text.y = element_text(size = 12),
#         plot.title = element_text(size = 16, hjust = 0.5)
#         )
#
# residual_bh_df <- data.frame(spawners = river_data$Spawners,
#                           recruits = river_data$Recruits,
#                           observed_log_RS = river_data$ln_RS,
#                           predicted_log_RS = apply((matrix(posterior_bh_rv_alpha_j[,1], ncol = length(river_data$Spawners), nrow = length(posterior_bh_rv_alpha_j[,1])) - log(1+as.matrix(exp(posterior_bh_rv_alpha_j[,1])/posterior_bh_rv_Rk)%*%river_data$Spawners)), 2, median),
#                           cpd = river_data$disturbedarea_prct_cs
# )
#
# residual_bh_df$residuals <- residual_bh_df$observed_log_RS - residual_bh_df$predicted_log_RS
#
# p6 <- ggplot(residual_bh_df)+
#   geom_point(aes(x = predicted_log_RS, y = residuals, color = cpd), alpha = 0.5, size = 2) +
#   geom_hline(yintercept = 0, color = 'black', linetype = 'dashed') +
#   labs(#title = "BH model with CPD, NPGO, ERSST",
#        x = TeX(r"(Predicted $\log \left(\frac{Recruits}{Spawners}\right)$)"), y = "Residuals") +
#   scale_color_gradient2(name = 'CPD in River (%)',
#                                     low = '#35978f', mid = 'gray', high = '#bf812d', midpoint = mid_cpd_real)+
#   theme_classic() +
#   theme(legend.position = "right",
#         legend.key.width = unit(0.5, "cm"),
#         legend.key.height = unit(1, "lines"),
#         legend.text = element_text(size = 7),
#         legend.spacing.y = unit(0.001, "cm"),
#         axis.title.x = element_text(size = 12),
#         axis.title.y = element_text(size = 12),
#         axis.text.x = element_text(size = 12),
#         axis.text.y = element_text(size = 12),
#         plot.title = element_text(size = 16, hjust = 0.5)
#         )
#
#
# print()
return((p1+p2)/(p3+p4)+ plot_layout(guides = "collect"))
}
plot_recruit_spawner_river(data = df, river_name = "CARNATION CREEK", species = "chum",
posterior = ric_chm_cpd_ocean_covariates_logR, posterior_bh = bh_chm_cpd_ocean_covariates
)
ggsave(filename = here("figures","presentation_june2025_chum_recruit_spawner_carnation_creek.png"),
width =8, height = 5, dpi = 300)
plot_forestry_effect_river_together(posterior1 = ric_chm_cpd_ocean_covariates_logR,
posterior2 = bh_chm_cpd_ocean_covariates,
river = "CARNATION CREEK",
effect = "cpd", species = "chum",
model1 = "Ricker",
model2 = "BH",
xlim = c(-2, 2))
ggsave(filename = here("figures","presentation_june2025_chum_forestry_effect_carnation_creek.png"),
width =8, height = 5, dpi = 300)
ggsave(filename = here("figures","presentation_june2025_chum_forestry_effect_carnation_creek.png"),
width =5, height = 5, dpi = 300)
