posterior_rv <- posterior %>%
select(starts_with('b_sst_rv')) %>%
pivot_longer(cols = everything(),
names_to = 'River',
names_prefix = 'b_sst_rv',
values_to = 'sst_effect') %>%
mutate(River_n = as.numeric(str_extract(River, '\\d+'))) %>%
select(-River) %>%
left_join(df %>% select(River_n, CU, CU_name, X_LONG, Y_LAT) %>%
distinct(), by = 'River_n')
} else if(species == "pink"){
df <- pk10r
posterior_rv <- posterior %>%
select(starts_with('b_sst_rv')) %>%
pivot_longer(cols = everything(),
names_to = 'River',
names_prefix = 'b_sst_rv',
values_to = 'sst_effect') %>%
mutate(River_n = as.numeric(str_extract(River, '\\d+'))) %>%
select(-River) %>%
left_join(df %>% select(River_n, X_LONG, Y_LAT) %>%
distinct(), by = 'River_n')
}
if(color_by == "CU_name"){
color_var = "CU_name"
color_name = "CU"
scale_color = scale_color_iwanthue(name = 'CU', hmin = 0, hmax = 360, cmin = 0, cmax = 80,
lmin = 10, lmax = 95)
} else if(color_by == "Y_LAT"){
color_var = "Y_LAT"
color_name = "Latitude"
scale_color = scale_color_viridis_c(name = 'Latitude', direction = -1)
} else if(color_by == "CU"){
color_var = "CU"
color_name = "CU"
scale_color = scale_color_iwanthue(name = 'CU', hmin = 0, hmax = 360, cmin = 0, cmax = 80,
lmin = 10, lmax = 95)
}
if(species == "chum"){
p1 <- ggplot()+
stat_density(data= posterior_rv, aes(sst_effect, color = !!sym(color_by), group = River_n),
geom = 'line', position = 'identity',
alpha = 0.1, linewidth = 1) +
geom_vline(xintercept = 0, color = 'slategray', linewidth = 0.8) +
labs(title = model,
x = 'Standardized coefficients of SST', y = 'Posterior density\nof SST effect') +
xlim(xlim[1], xlim[2]) +
geom_density(aes(posterior$b_sst), color = 'black', linewidth = 1.2, alpha = 0.2)+
# scale_color_iwanthue(name = 'CU', hmin = 0, hmax = 360, cmin = 0, cmax = 80,
#                      lmin = 10, lmax = 95) +
scale_color +
geom_vline(xintercept = median(posterior$b_sst), color = 'black', linetype = 'dashed') +
theme_classic()+
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(0.4, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)+
guides(color = guide_legend(override.aes = list(alpha = 1, linewidth = 2), ncol = 1))
} else if(species == "pink"){
p1 <- ggplot()+
stat_density(data= posterior_rv, aes(sst_effect, group = River_n),
geom = 'line', position = 'identity', color = "gray",
alpha = 0.1, linewidth = 1) +
geom_vline(xintercept = 0, color = 'slategray', linewidth = 0.8) +
labs(title = model,
x = 'Standardized coefficients of SST', y = 'Posterior density\nof SST effect') +
xlim(xlim[1], xlim[2]) +
geom_density(aes(posterior$b_sst), color = 'black', linewidth = 1.2, alpha = 0.2)+
# scale_color_iwanthue(name = 'CU', hmin = 0, hmax = 360, cmin = 0, cmax = 80,
#                      lmin = 10, lmax = 95) +
geom_vline(xintercept = median(posterior$b_sst), color = 'black', linetype = 'dashed') +
theme_classic()+
theme(legend.position = "right",
legend.key.width = unit(0.5, "cm"),
legend.key.height = unit(0.4, "lines"),
legend.text = element_text(size = 7),
legend.spacing.y = unit(0.001, "cm"),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0.5)
)+
guides(color = guide_legend(override.aes = list(alpha = 1, linewidth = 2), ncol = 1))
}
return(p1)
}
plot_sst_effect(posterior = bh_chm_eca_ersst_pdo, effect = "cpd", species = "chum", model = "BH model with NPGO, ERSST, PDO")
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(here)
load(here('stan models','outs','fits','bh_chm_eca_npgo_ersst_pdo.RDS'))
load(here('stan models','outs','fits','bh_chm_cpd_npgo_ersst_pdo.RDS'))
readRDS(here('stan models','outs','fits','bh_chm_eca_npgo_ersst_pdo.RDS'))
cpd <- readRDS(here('stan models','outs','fits','bh_chm_cpd_npgo_ersst_pdo.RDS'))
eca <- readRDS(here('stan models','outs','fits','bh_chm_eca_npgo_ersst_pdo.RDS'))
library(bayesplot)
trace_eca <- mcmc_trace(eca, pars = c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv','b_pdo_cu', 'b_pdo_rv',
'alpha_j','Smax','sigma'))
trace_eca <- mcmc_trace(eca, pars = c('b_for'))
eca_posterior <- as.array(eca)
eca
eca <- readRDS(here('stan models','outs','fits','bh_chm_eca_npgo_ersst_pdo_trial.RDS'))
eca_posterior <- as.array(eca)
eca
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 10,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load datasets####
# ch20r <- read.csv(here("origional-ecofish-data-models","Data","Processed","chum_SR_20_hat_yr_w_npgo.csv"))
ch20r <- read.csv(here("origional-ecofish-data-models","Data","Processed","chum_SR_20_hat_yr_w_ersst_pdo.csv"))
options(mc.cores=8)
## data formatting ####
#two rivers with duplicated names:
ch20r$River=ifelse(ch20r$WATERSHED_CDE=='950-169400-00000-00000-0000-0000-000-000-000-000-000-000','SALMON RIVER 2',ch20r$River)
ch20r$River=ifelse(ch20r$WATERSHED_CDE=="915-486500-05300-00000-0000-0000-000-000-000-000-000-000",'LAGOON CREEK 2',ch20r$River)
ch20r=ch20r[order(factor(ch20r$River),ch20r$BroodYear),]
rownames(ch20r)=seq(1:nrow(ch20r))
#normalize ECA 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.ECA=sqrt(ch20r$ECA_age_proxy_forested_only)
ch20r$sqrt.ECA.std=(ch20r$sqrt.ECA-mean(ch20r$sqrt.ECA))/sd(ch20r$sqrt.ECA)
#normalize CPD 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.CPD=sqrt(ch20r$disturbedarea_prct_cs)
ch20r$sqrt.CPD.std=(ch20r$sqrt.CPD-mean(ch20r$sqrt.CPD))/sd(ch20r$sqrt.CPD)
#standardize npgo
ch20r$npgo.std=(ch20r$npgo-mean(ch20r$npgo))/sd(ch20r$npgo)
ch20r$sst.std = (ch20r$spring_ersst-mean(ch20r$spring_ersst))/sd(ch20r$spring_ersst)
##average ECA by stock
#just to see an overview of ECA by river
eca_s=ch20r%>%group_by(River)%>%summarize(m=mean(ECA_age_proxy_forested_only*100),range=max(ECA_age_proxy_forested_only*100)-min(ECA_age_proxy_forested_only*100),cu=unique(CU))
#extract max S for priors on capacity & eq. recruitment
smax_prior=ch20r%>%group_by(River) %>%summarize(m.s=max(Spawners),m.r=max(Recruits))
k_prior = ch20r%>%group_by(River) %>%summarize(m.k=mean(Spawners))
#ragged start and end points for each SR series
N_s=rag_n(ch20r$River)
#cus by stock
cu=distinct(ch20r,River,.keep_all = T)
cu.nrv=summary(factor(cu$CU))
#time points for each series
L_i=ch20r%>%group_by(River)%>%summarize(l=n(),min=min(BroodYear),max=max(BroodYear),tmin=min(BroodYear)-1954+1,tmax=max(BroodYear)-1954+1)
#data list for fits
dl_chm_eca_npgo_sst=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
npgo=ch20r$npgo.std, #design matrix for standardized npgo
sst=ch20r$sst.std,
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
# pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
# pSmax_sig=5*smax_prior$m.s,
# pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
# pRk_sig=smax_prior$m.r,
p_k_mean = 0.5*k_prior$m.k,
p_k_sig = 5*k_prior$m.k)
dl_chm_cpd_npgo_sst=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=ch20r$sqrt.CPD.std, #design matrix for standardized ECA
npgo=ch20r$npgo.std, #design matrix for standardized npgo
sst=ch20r$sst.std,
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
# pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
# pSmax_sig=5*smax_prior$m.s,
# pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
# pRk_sig=smax_prior$m.r,
p_k_mean = 0.5*k_prior$m.k,
p_k_sig = 5*k_prior$m.k)
print("eca")
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
1e6
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 50,
iter_sampling = 50,
refresh = 10,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_cpd_npgo_sst <- mric$sample(data=dl_chm_cpd_npgo_sst,
chains = 1,
iter_warmup = 50,
iter_sampling =50,
refresh = 10,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_cpd_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_cpd_npgo_ersst_cc_trial.csv')
ric_chm_cpd_npgo_sst$save_object('./stan models/outs/fits/ric_chm_cpd_npgo_ersst_Cc_trial.RDS')
post_ric_chm_cpd_npgo_sst=ric_chm_cpd_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_cpd_npgo_sst,here('stan models','outs','posterior','ric_chm_cpd_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_cpd_npgo_sst <- mric$sample(data=dl_chm_cpd_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_cpd_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_cpd_npgo_ersst_cc.csv"))
ric_chm_cpd_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_cpd_npgo_ersst_cc.RDS"))
post_ric_chm_cpd_npgo_sst=ric_chm_cpd_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_cpd_npgo_sst,here('stan models','outs','posterior','ric_chm_cpd_npgo_ersst_cc.csv'))
}
post_ric_chm_cpd_npgo_sst <- as.array(cpd)
mcmc_trace(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_intervals(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_areas(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_hist(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_trace(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst_pdo.csv'))
mcmc_trace(cpd, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst.csv'))
mcmc_trace(cpd, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst_pdo.csv'))
rhat(ric_chm_cpd_npgo_sst)
rhat(ric_chm_cpd_npgo_sst)$b_for
eca_summary <- read.csv(here('stan models','outs','summary','bh_chm_eca_npgo_ersst_pdo.csv'))
eca_summary %>%
select(variable, rhat) %>%
summarise(mean(rhat))
eca_summary %>%
select(variable, rhat)
eca_summary %>%
select(variable, rhat) %>%
filter(variable == 'b_for')
eca_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.1)
cpd_summary <- read.csv(here('stan models','outs','summary','bh_chm_cpd_npgo_ersst_pdo.csv'))
cpd_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.1)
