C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
mbh = mbh,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
library(here);library(cmdstanr);library(dplyr)
source('./stan models/code/funcs.R')
# load datasets####
ch20r <- read.csv("./origional-ecofish-data-models/Data/Processed/chum_SR_20_hat_yr_reduced_VRI90.csv")
#even year pinks
pk10r_e <- read.csv("./origional-ecofish-data-models/Data/Processed/pke_SR_10_hat_yr_reduced_VRI90.csv")
#odd year pinks
pk10r_o <- read.csv("./origional-ecofish-data-models/Data/Processed/PKO_SR_10_hat_yr_reduced_VRI90.csv")
options(mc.cores=8)
#Note: you will need to set your cmdstanr path to a folder with hier_eca_mod.stan file, using the next line
cmdstanr::set_cmdstan_path(path='C:/Users/greenbergda/Documents/.cmdstan/cmdstan-2.29.2')
#basic model excluding watershed areas:
# load Stan model sets####
#BH
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_chm_ac.stan") #timevarying models w/ river-level autocorrelated residuals
mbh=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_chm_static.stan") #timevarying models w/ river-level autocorrelated residuals
mbh_st=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_pink_ac.stan")  #timevarying models w/ river-level autocorrelated residua
mbh_p=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_pink_static.stan")  #timevarying models w/ river-level autocorrelated residua
mbh_p=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
#Cushing forms
file_csh=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_chm_ac.stan")  #timevarying models w/ river-level autocorrelated residua
mcush=cmdstanr::cmdstan_model(file_csh) #compile stan code to C++
file_csh_st=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_chm_static.stan")  #static models w/ river-level autocorrelated residua
mcush_st=cmdstanr::cmdstan_model(file_csh_st) #compile stan code to C++
file_csh=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_pink_ac.stan")
mcush_p=cmdstanr::cmdstan_model(file_csh) #compile stan code to C++
file_csh_st=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_pink_static.stan")
mcush_p_st=cmdstanr::cmdstan_model(file_csh_st) #compile stan code to C++
#Ricker forms
file_ric=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_chm_ac.stan")
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
file_ric2=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_chm_static.stan")
mric_st=cmdstanr::cmdstan_model(file_ric2) #compile stan code to C++
file_ric=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_pink_ac.stan")
mric_p=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
file_ric_st=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_pink_static.stan")
mric_p_st=cmdstanr::cmdstan_model(file_ric_st) #compile stan code to C++
ch20r$River=ifelse(ch20r$WATERSHED_CDE=='950-169400-00000-00000-0000-0000-000-000-000-000-000-000','SALMON RIVER 2',ch20r$River)
ch20r$River=ifelse(ch20r$WATERSHED_CDE=="915-486500-05300-00000-0000-0000-000-000-000-000-000-000",'LAGOON CREEK 2',ch20r$River)
ch20r=ch20r[order(factor(ch20r$River),ch20r$BroodYear),]
rownames(ch20r)=seq(1:nrow(ch20r))
#normalize ECA 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.ECA=sqrt(ch20r$ECA_age_proxy_forested_only)
ch20r$sqrt.ECA.std=(ch20r$sqrt.ECA-mean(ch20r$sqrt.ECA))/sd(ch20r$sqrt.ECA)
#normalize CPD 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.CPD=sqrt(ch20r$disturbedarea_prct_cs)
ch20r$sqrt.CPD.std=(ch20r$sqrt.CPD-mean(ch20r$sqrt.CPD))/sd(ch20r$sqrt.CPD)
##average ECA by stock
#just to see an overview of ECA by river
eca_s=ch20r%>%group_by(River)%>%summarize(m=mean(ECA_age_proxy_forested_only*100),range=max(ECA_age_proxy_forested_only*100)-min(ECA_age_proxy_forested_only*100),cu=unique(CU))
#extract max S for priors on capacity & eq. recruitment
smax_prior=ch20r%>%group_by(River) %>%summarize(m.s=max(Spawners),m.r=max(Recruits))
#ragged start and end points for each SR series
N_s=rag_n(ch20r$River)
#cus by stock
cu=distinct(ch20r,River,.keep_all = T)
cu.nrv=summary(factor(cu$CU))
#time points for each series
L_i=ch20r%>%group_by(River)%>%summarize(l=n(),min=min(BroodYear),max=max(BroodYear),tmin=min(BroodYear)-1954+1,tmax=max(BroodYear)-1954+1)
#data list for fits
dl_chm_eca=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s*2,
pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
dl_chm_cpd=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s*2,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
### static productivity models ####
bh_chm_eca_st <- mbh_st$sample(data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_eca_st$summary(),'./stan models/outs/summary/bh_chm_eca_st.csv')
bh_chm_eca_st$save_object('./stan models/outs/fits/bh_chm_eca_st.RDS')
post_bh_chm_eca_st=bh_chm_eca_st$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca_st,here('stan models','outs','posterior','bh_chm_eca.csv'))
cush_chm_cpd <- mcush$sample(data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(cush_chm_cpd$summary(),'./stan models/outs/summary/cush_chm_cpd.csv')
cush_chm_cpd$save_object('./stan models/outs/fits/cush_chm_cpd.RDS')
post_cush_chm_cpd=cush_chm_cpd$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','b','sigma'),format='draws_matrix')
write.csv(post_cush_chm_cpd,here('stan models','outs','posterior','cush_chm_cpd.csv'))
bh_chm_cpd <- mbh$sample(data=dl_chm_cpd,
chains = 8,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd$summary(),'./stan models/outs/summary/bh_chm_cpd.csv')
bh_chm_cpd$save_object('./stan models/outs/fits/bh_chm_cpd.RDS')
post_chm_cpd=bh_chm_cpd$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','posterior','bh_chm_cpd.csv'))
### static productivity models ####
bh_chm_eca_st <- mbh_st$sample(data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_eca_st$summary(),'./stan models/outs/summary/bh_chm_eca_st.csv')
bh_chm_eca_st$save_object('./stan models/outs/fits/bh_chm_eca_st.RDS')
post_bh_chm_eca_st=bh_chm_eca_st$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca_st,here('stan models','outs','posterior','bh_chm_eca.csv'))
