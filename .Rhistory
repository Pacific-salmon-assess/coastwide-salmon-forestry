adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
library(here);library(cmdstanr);library(dplyr)
source('./stan models/code/funcs.R')
# load datasets####
ch20r <- read.csv("./origional-ecofish-data-models/Data/Processed/chum_SR_20_hat_yr_reduced_VRI90.csv")
#even year pinks
pk10r_e <- read.csv("./origional-ecofish-data-models/Data/Processed/pke_SR_10_hat_yr_reduced_VRI90.csv")
#odd year pinks
pk10r_o <- read.csv("./origional-ecofish-data-models/Data/Processed/PKO_SR_10_hat_yr_reduced_VRI90.csv")
options(mc.cores=8)
#Note: you will need to set your cmdstanr path to a folder with hier_eca_mod.stan file, using the next line
cmdstanr::set_cmdstan_path(path='C:/Users/greenbergda/Documents/.cmdstan/cmdstan-2.29.2')
#basic model excluding watershed areas:
# load Stan model sets####
#BH
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_chm_ac.stan") #timevarying models w/ river-level autocorrelated residuals
mbh=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_chm_static.stan") #timevarying models w/ river-level autocorrelated residuals
mbh_st=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_pink_ac.stan")  #timevarying models w/ river-level autocorrelated residua
mbh_p=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
file_bh=file.path(cmdstanr::cmdstan_path(),'sr models', "bh_pink_static.stan")  #timevarying models w/ river-level autocorrelated residua
mbh_p=cmdstanr::cmdstan_model(file_bh) #compile stan code to C++
#Cushing forms
file_csh=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_chm_ac.stan")  #timevarying models w/ river-level autocorrelated residua
mcush=cmdstanr::cmdstan_model(file_csh) #compile stan code to C++
file_csh_st=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_chm_static.stan")  #static models w/ river-level autocorrelated residua
mcush_st=cmdstanr::cmdstan_model(file_csh_st) #compile stan code to C++
file_csh=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_pink_ac.stan")
mcush_p=cmdstanr::cmdstan_model(file_csh) #compile stan code to C++
file_csh_st=file.path(cmdstanr::cmdstan_path(),'sr models', "cush_pink_static.stan")
mcush_p_st=cmdstanr::cmdstan_model(file_csh_st) #compile stan code to C++
#Ricker forms
file_ric=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_chm_ac.stan")
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
file_ric2=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_chm_static.stan")
mric_st=cmdstanr::cmdstan_model(file_ric2) #compile stan code to C++
file_ric=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_pink_ac.stan")
mric_p=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
file_ric_st=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_pink_static.stan")
mric_p_st=cmdstanr::cmdstan_model(file_ric_st) #compile stan code to C++
ch20r$River=ifelse(ch20r$WATERSHED_CDE=='950-169400-00000-00000-0000-0000-000-000-000-000-000-000','SALMON RIVER 2',ch20r$River)
ch20r$River=ifelse(ch20r$WATERSHED_CDE=="915-486500-05300-00000-0000-0000-000-000-000-000-000-000",'LAGOON CREEK 2',ch20r$River)
ch20r=ch20r[order(factor(ch20r$River),ch20r$BroodYear),]
rownames(ch20r)=seq(1:nrow(ch20r))
#normalize ECA 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.ECA=sqrt(ch20r$ECA_age_proxy_forested_only)
ch20r$sqrt.ECA.std=(ch20r$sqrt.ECA-mean(ch20r$sqrt.ECA))/sd(ch20r$sqrt.ECA)
#normalize CPD 2 - square root transformation (ie. sqrt(x))
ch20r$sqrt.CPD=sqrt(ch20r$disturbedarea_prct_cs)
ch20r$sqrt.CPD.std=(ch20r$sqrt.CPD-mean(ch20r$sqrt.CPD))/sd(ch20r$sqrt.CPD)
##average ECA by stock
#just to see an overview of ECA by river
eca_s=ch20r%>%group_by(River)%>%summarize(m=mean(ECA_age_proxy_forested_only*100),range=max(ECA_age_proxy_forested_only*100)-min(ECA_age_proxy_forested_only*100),cu=unique(CU))
#extract max S for priors on capacity & eq. recruitment
smax_prior=ch20r%>%group_by(River) %>%summarize(m.s=max(Spawners),m.r=max(Recruits))
#ragged start and end points for each SR series
N_s=rag_n(ch20r$River)
#cus by stock
cu=distinct(ch20r,River,.keep_all = T)
cu.nrv=summary(factor(cu$CU))
#time points for each series
L_i=ch20r%>%group_by(River)%>%summarize(l=n(),min=min(BroodYear),max=max(BroodYear),tmin=min(BroodYear)-1954+1,tmax=max(BroodYear)-1954+1)
#data list for fits
dl_chm_eca=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s*2,
pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
dl_chm_cpd=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s*2,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
### static productivity models ####
bh_chm_eca_st <- mbh_st$sample(data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_eca_st$summary(),'./stan models/outs/summary/bh_chm_eca_st.csv')
bh_chm_eca_st$save_object('./stan models/outs/fits/bh_chm_eca_st.RDS')
post_bh_chm_eca_st=bh_chm_eca_st$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca_st,here('stan models','outs','posterior','bh_chm_eca.csv'))
cush_chm_cpd <- mcush$sample(data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(cush_chm_cpd$summary(),'./stan models/outs/summary/cush_chm_cpd.csv')
cush_chm_cpd$save_object('./stan models/outs/fits/cush_chm_cpd.RDS')
post_cush_chm_cpd=cush_chm_cpd$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','b','sigma'),format='draws_matrix')
write.csv(post_cush_chm_cpd,here('stan models','outs','posterior','cush_chm_cpd.csv'))
bh_chm_cpd <- mbh$sample(data=dl_chm_cpd,
chains = 8,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd$summary(),'./stan models/outs/summary/bh_chm_cpd.csv')
bh_chm_cpd$save_object('./stan models/outs/fits/bh_chm_cpd.RDS')
post_chm_cpd=bh_chm_cpd$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','posterior','bh_chm_cpd.csv'))
### static productivity models ####
bh_chm_eca_st <- mbh_st$sample(data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_eca_st$summary(),'./stan models/outs/summary/bh_chm_eca_st.csv')
bh_chm_eca_st$save_object('./stan models/outs/fits/bh_chm_eca_st.RDS')
post_bh_chm_eca_st=bh_chm_eca_st$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca_st,here('stan models','outs','posterior','bh_chm_eca.csv'))
library(here);library(cmdstanr);library(dplyr)
source('./stan models/code/funcs.R')
# load datasets####
ch20r <- read.csv("./origional-ecofish-data-models/Data/Processed/chum_SR_20_hat_yr.csv")
#even year pinks
pk10r_e <- read.csv("./origional-ecofish-data-models/Data/Processed/pke_SR_10_hat_yr_reduced_VRI90.csv")
#odd year pinks
pk10r_o <- read.csv("./origional-ecofish-data-models/Data/Processed/PKO_SR_10_hat_yr_reduced_VRI90.csv")
options(mc.cores=8)
#Note: you will need to set your cmdstanr path to a folder with hier_eca_mod.stan file, using the next line
cmdstanr::set_cmdstan_path(path='C:/Users/greenbergda/Documents/.cmdstan/cmdstan-2.29.2')
#basic model excluding watershed areas:
file_ric_st=file.path(cmdstanr::cmdstan_path(),'sr models', "ric_pink_static_noac.stan")
mric_p_st2=cmdstanr::cmdstan_model(file_ric_st) #compile stan code to C++
library(here);library(dplyr); library(stringr)
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(hues)
ch20rsc_sst <-read.csv(here("origional-ecofish-data-models","Data","Processed","chum_SR_20_hat_yr_w_lh_sst_estimate.csv"))
#two rivers with duplicated names:
ch20rsc_sst$River=ifelse(ch20rsc_sst$WATERSHED_CDE=='950-169400-00000-00000-0000-0000-000-000-000-000-000-000','SALMON RIVER 2',ch20rsc_sst$River)
ch20rsc_sst$River=ifelse(ch20rsc_sst$WATERSHED_CDE=="915-486500-05300-00000-0000-0000-000-000-000-000-000-000",'LAGOON CREEK 2',ch20rsc_sst$River)
ch20rsc_sst=ch20rsc_sst[order(factor(ch20rsc_sst$River),ch20rsc_sst$BroodYear),]
ch20rsc_sst$River_n <- as.numeric(factor(ch20rsc_sst$River))
# CU names
#####
cu_names <- data.frame(CU = c("CM-1","CM-2","CM-3","CM-4","CM-5","CM-6",
"CM-7","CM-8","CM-9","CM-10","CM-11","CM-12",
"CM-13","CM-14","CM-15","CM-16","CM-17","CM-18",
"CM-19","CM-20","CM-21","CM-22","CM-23","CM-24",
"CM-25","CM-26","CM-27","CM-28","CM-29","CM-30",
"CM-31","CM-32","CM-33","CM-34","CM-35","CM-36",
"CM-37","CM-38", "CM-39"),
CU_name = c("Fraser Canyon",
"Lower Fraser",
"Howe Sound-Burrard Inlet",
"Georgia Strait",
"East Vancouver Island",
"Loughborough",
"Bute Inlet",
"Southern Coastal Streams",
"Upper Knight",
"Southwest Vancouver Island",
"Northwest Vancouver Island",
"Smith Inlet",
"Rivers Inlet",
"Wannock",
"Spiller-Fitz Hugh-Burke",
"Bella Coola - Dean Rivers",
"Bella Coola River - Late",
"Hecate Lowlands",
"Mussel-Kynoch",
"Douglas-Gardner",
"East Haida Gwaii",
"Skidegate",
"West Haida Gwaii",
"North Haida Gwaii",
"North Haida Gwaii-Stanley Creek",
"Skeena Estuary",
"Lower Skeena",
"Middle Skeena",
"Upper Skeena",
"Portland Inlet",
"Lower Nass",
"Portland Canal-Observatory",
"Unuk",
"Lower Stikine",
"Whiting",
"Taku",
"Lynn Canal",
"Teslin",
"Lower Liard"))
#####
# ch20rsc <- ch20rsc %>% left_join(cu_names, by = 'CU')
ch20rsc_sst <- ch20rsc_sst %>% left_join(cu_names, by = 'CU')
eca <- seq(0,1,length.out=100)
cpd <- seq(0,100,length.out=100)
eca_sqrt <- sqrt(eca)
ch20rsc_sst$sqrt.ECA=sqrt(ch20rsc_sst$ECA_age_proxy_forested_only)
eca_std_sqrt = (eca_sqrt-mean(eca_sqrt))/sd(eca_sqrt)
ch20rsc_sst$sqrt.CPD=sqrt(ch20rsc_sst$disturbedarea_prct_cs)
ch20rsc_sst$sqrt.CPD.std=(ch20rsc_sst$sqrt.CPD-mean(ch20rsc_sst$sqrt.CPD))/sd(ch20rsc_sst$sqrt.CPD)
bh_chm_eca_sst=read.csv(here('stan models','outs','posterior','bh_chm_eca_npgo_lh_sst.csv'),check.names=F)
bh_chm_cpd_sst=read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_lh_sst.csv'),check.names=F)
full_productivity <- NULL
no_forestry <- min(eca_std_sqrt)
for (i in 1:length(unique(ch20rsc_sst$River_n))){
river <- unique(ch20rsc_sst$River_n)[i]
river_data <- ch20rsc_sst %>% filter(River_n == river)
b <- bh_chm_eca_sst %>% select(starts_with("b_for_rv")) %>%
select(ends_with(paste0("[",river,"]")))
#cpd
# max_cpd <- max(river_data$sqrt.CPD.std)
# productivity <- as.matrix(b[,1])%*%
# (eca_std_sqrt-no_forestry)
productivity <- (exp(as.matrix(b[,1])%*%
(eca_std_sqrt-no_forestry)))*100 - 100
productivity_median <- apply(productivity,2,median)
productivity_median_df <- data.frame(River = unique(river_data$River),
productivity_median = productivity_median,
eca = eca)
full_productivity <- rbind(full_productivity, productivity_median_df)
}
ggplot(full_productivity) +
geom_line(aes(x = eca*100, y = productivity_median, group = River),
color = "darkgray",alpha=0.05) +
geom_line(data = median_df,
aes(x = eca*100, y = productivity_median), color = "black", size = 1) +
ylim(-100,100) +
scale_x_continuous(breaks = seq(0,100,20)) +
labs(#title = "Productivity Decline",
x = "Equivalent clearcut area (%)",
y = "Change in productivity (%)") +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10))
b <- bh_chm_eca_sst %>% select(ends_with("b_for"))
global_prediction <- apply(exp(as.matrix(b[,1])%*%
(eca_std_sqrt-no_forestry))*100 - 100,2,median)
global_df <- data.frame(eca = eca,
productivity_median = global_prediction)
p1 <- ggplot(full_productivity) +
geom_line(aes(x = eca*100, y = productivity_median, group = River),
color = "darkgray",alpha=0.05) +
geom_line(data = global_df,
aes(x = eca*100, y = productivity_median), color = "black", size = 1) +
ylim(-100,100) +
scale_x_continuous(breaks = seq(0,100,20)) +
labs(#title = "Productivity Decline",
x = "Equivalent clearcut area (%)",
y = "Change in productivity (%)") +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10))
p1
p1 <- ggplot(full_productivity) +
geom_line(aes(x = eca*100, y = productivity_median, group = River),
color = "darkgray",alpha=0.05) +
geom_line(data = global_df,
aes(x = eca*100, y = productivity_median), color = "black", linewidth = 1) +
ylim(-100,100) +
scale_x_continuous(breaks = seq(0,100,20)) +
labs(#title = "Productivity Decline",
x = "Equivalent clearcut area (%)",
y = "Change in productivity (%)") +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10))
p1
cpd_sqrt <- sqrt(cpd)
cpd_std_sqrt = (cpd_sqrt-mean(cpd_sqrt))/sd(cpd_sqrt)
cpd <- seq(0,100,length.out=100)
cpd_sqrt <- sqrt(cpd)
cpd_std_sqrt = (cpd_sqrt-mean(cpd_sqrt))/sd(cpd_sqrt)
bh_chm_cpd_sst=read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_lh_sst.csv'),check.names=F)
full_productivity_cpd <- NULL
no_forestry_cpd <- min(cpd_std_sqrt)
for (i in 1:length(unique(ch20rsc_sst$River_n))){
river <- unique(ch20rsc_sst$River_n)[i]
river_data <- ch20rsc_sst %>% filter(River_n == river)
b_cpd <- bh_chm_cpd_sst %>% select(starts_with("b_for_rv")) %>%
select(ends_with(paste0("[",river,"]")))
productivity_cpd <- (exp(as.matrix(b_cpd[,1])%*%
(cpd_std_sqrt-no_forestry_cpd)))*100 - 100
productivity_median_cpd <- apply(productivity_cpd,2,median)
productivity_median_df_cpd <- data.frame(River = unique(river_data$River),
productivity_median = productivity_median_cpd,
cpd = cpd)
full_productivity_cpd <- rbind(full_productivity_cpd, productivity_median_df_cpd)
}
b_cpd <- bh_chm_cpd_sst %>% select(ends_with("b_for"))
global_prediction_cpd <- apply(exp(as.matrix(b_cpd[,1])%*%
(cpd_std_sqrt-no_forestry_cpd))*100 - 100,2,median)
global_df_cpd <- data.frame(cpd = cpd,
productivity_median = global_prediction_cpd)
p2 <- ggplot(full_productivity_cpd) +
geom_line(aes(x = cpd, y = productivity_median, group = River),
color = "darkgray",alpha=0.05) +
geom_line(data = global_df_cpd,
aes(x = cpd, y = productivity_median), color = "black", linewidth = 1) +
ylim(-100,100) +
scale_x_continuous(breaks = seq(0,100,20)) +
labs(#title = "Productivity Decline",
x = "Cumulative percent disturbed (%)",
y = "Change in productivity (%)") +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10))
p2
ggplot(global_df) +
geom_line(aes(x = eca*100, y = productivity_median), color = "black", linewidth = 1) +
geom_ribbon(aes(x = eca*100, ymin = q(0.025), ymax = q(0.975)),
data = as.data.frame(apply(exp(as.matrix(b[,1])%*%
(eca_std_sqrt-no_forestry))*100 - 100,2,quantile,c(0.025,0.975))),
fill = "gray", alpha = 0.5) +
ylim(-100,100) +
scale_x_continuous(breaks = seq(0,100,20)) +
labs(#title = "Productivity Decline",
x = "Equivalent clearcut area (%)",
y = "Change in productivity (%)") +
theme_classic() +
theme(legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10))
ggplot(global_df) +
geom_line(aes(x = eca*100, y = productivity_median), color = "black", linewidth = 1) +
geom_ribbon(aes(x = eca*100, ymin = q(0.025), ymax = q(0.975)),
data = as.data.frame(apply(exp(as.matrix(b[,1])%*%
(eca_std_sqrt-no_forestry))*100 - 100,2,quantile,c(0.025,0.975))),
fill = "gray", alpha = 0.5)
as.data.frame(apply(exp(as.matrix(b[,1])%*%
(eca_std_sqrt-no_forestry))*100 - 100,2,quantile,c(0.025,0.975)))
q(0.025)
