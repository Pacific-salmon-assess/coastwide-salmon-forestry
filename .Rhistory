print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
dl_chm_cpd=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
.options = furrr_options(seed = 20),
.progress=TRUE)
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
dl_chm_cpd=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
.options = furrr_options(seed = 20),
.progress=TRUE)
.libPaths()
cmdstan_path()
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
dl_chm_eca=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s,
pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
dl_chm_cpd=list(N=nrow(ch20r),
L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
C=length(unique(ch20r$CU)),
J=length(unique(ch20r$River)),
C_i=as.numeric(factor(cu$CU)), #CU index by stock
ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
R_S=ch20r$ln_RS,
S=ch20r$Spawners,
forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
start_y=N_s[,1],
end_y=N_s[,2],
start_t=L_i$tmin,
end_t=L_i$tmax,
pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
pSmax_sig=smax_prior$m.s,
pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
mbh = mbh,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
# tic()
fit_model_chum_eca_bh <- function(dl_chm_eca) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_eca=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=ch20r$sqrt.ECA.std, #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, ##prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_eca_parallel <- mbh$sample(
data=dl_chm_eca,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(model_fit_bh_chm_eca_parallel$summary(),'./stan models/outs/summary/bh_chm_eca_mk.csv')
model_fit_bh_chm_eca_parallel$save_object('./stan models/outs/fits/bh_chm_eca_mk.RDS')
post_bh_chm_eca=model_fit_bh_chm_eca_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk','sigma'),format='draws_matrix')
write.csv(post_bh_chm_eca,here('stan models','outs','posterior','bh_chm_eca_mk.csv'))
}
fit_model_chum_cpd_bh <- function(dl_chm_cpd) {
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
library(cmdstanr)
library(here)
set_cmdstan_path("C:/Users/mariakur/.cmdstan/cmdstan-2.35.0")
} else {
print("Running on server")
.libPaths(new = "/home/mkuruvil/R_Packages")
set_cmdstan_path("/home/mkuruvil/R_Packages/cmdstan-2.35.0")
}
#data list for fits
# dl_chm_cpd=list(N=nrow(ch20r),
#                 L=max(ch20r$BroodYear)-min(ch20r$BroodYear)+1,
#                 C=length(unique(ch20r$CU)),
#                 J=length(unique(ch20r$River)),
#                 C_i=as.numeric(factor(cu$CU)), #CU index by stock
#                 ii=as.numeric(factor(ch20r$BroodYear)), #brood year index
#                 R_S=ch20r$ln_RS,
#                 S=ch20r$Spawners,
#                 forest_loss=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 ECA=as.vector(ch20r$sqrt.CPD.std), #design matrix for standardized ECA
#                 start_y=N_s[,1],
#                 end_y=N_s[,2],
#                 start_t=L_i$tmin,
#                 end_t=L_i$tmax,
#                 pSmax_mean=0.5*smax_prior$m.s, #prior for Smax (spawners that maximize recruitment) based on max observed spawners
#                 pSmax_sig=smax_prior$m.s,
#                 pRk_mean=0.75*smax_prior$m.r, #prior for Rk (recruitment capacity) based on max observed spawners
#                 pRk_sig=smax_prior$m.r)
file_bh=file.path(here('stan models', 'code', 'bh_chm.stan'))
mbh=cmdstanr::cmdstan_model(file_bh)
bh_chm_cpd_parallel <- mbh$sample(
data=dl_chm_cpd,
chains = 6,
init=0,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(bh_chm_cpd_parallel$summary(),'./stan models/outs/summary/bh_chm_cpd_mk.csv')
bh_chm_cpd_parallel$save_object('./stan models/outs/fits/bh_chm_cpd_mk.RDS')
post_chm_cpd=bh_chm_cpd_parallel$draws(variables=c('b_for','b_for_cu','b_for_rv','alpha_t','alpha_j','Rk'),format='draws_matrix')
write.csv(post_chm_cpd,here('stan models','outs','fits','posterior','bh_chm_cpd_mk.csv'))
}
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
tic()
model_fit_bh_chm_cpd_parallel <- future_map(.x=list(dl_chm_eca, dl_chm_cpd),
.f=list(fit_model_chum_eca_bh,fit_model_chum_cpd_bh),
ch20r=ch20r,
dl_chm_eca=dl_chm_eca,
dl_chm_cpd=dl_chm_cpd,
.env_globals = parent.frame(),
.options = furrr_options(seed = 20),
.progress=TRUE)
