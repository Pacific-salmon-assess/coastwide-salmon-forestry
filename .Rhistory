# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
1e6
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
# load Stan model sets####
file_ric=file.path(here('stan models', 'code', 'ric_chm_static_npgo_sst_cc.stan'))
mric=cmdstanr::cmdstan_model(file_ric) #compile stan code to C++
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 200,
iter_sampling = 100,
refresh = 200,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 1,
iter_warmup = 50,
iter_sampling = 50,
refresh = 10,
# init = list(list(b_for = -0.5,
#                  b_npgo = 0.5,
#                  b_sst = -0.5,
#                  alpha0 = 1.5,
#                  mu_sigma = 2,
#                  cu_sigma = rep(0,length(unique(ch20r$CU))))),
# init = 0,
adapt_delta = 0.9,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_eca_npgo_ersst_cc_trial.csv')
ric_chm_eca_npgo_sst$save_object('./stan models/outs/fits/ric_chm_eca_npgo_ersst_cc_trial.RDS')
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_eca_npgo_sst <- mric$sample(data=dl_chm_eca_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_eca_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_eca_npgo_ersst_cc.csv"))
ric_chm_eca_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_eca_npgo_ersst_cc.RDS"))
post_ric_chm_eca_npgo_sst=ric_chm_eca_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_eca_npgo_sst,here('stan models','outs','posterior','ric_chm_eca_npgo_ersst_cc.csv'))
}
if(Sys.info()[7] == "mariakur") {
print("Running on local machine")
ric_chm_cpd_npgo_sst <- mric$sample(data=dl_chm_cpd_npgo_sst,
chains = 1,
iter_warmup = 50,
iter_sampling =50,
refresh = 10,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_cpd_npgo_sst$summary(),'./stan models/outs/summary/ric_chm_cpd_npgo_ersst_cc_trial.csv')
ric_chm_cpd_npgo_sst$save_object('./stan models/outs/fits/ric_chm_cpd_npgo_ersst_Cc_trial.RDS')
post_ric_chm_cpd_npgo_sst=ric_chm_cpd_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_cpd_npgo_sst,here('stan models','outs','posterior','ric_chm_cpd_npgo_ersst_cc_trial.csv'))
} else {
ric_chm_cpd_npgo_sst <- mric$sample(data=dl_chm_cpd_npgo_sst,
chains = 6,
iter_warmup = 200,
iter_sampling =500,
refresh = 100,
adapt_delta = 0.999,
max_treedepth = 20)
write.csv(ric_chm_cpd_npgo_sst$summary(),here("stan models","outs","summary","ric_chm_cpd_npgo_ersst_cc.csv"))
ric_chm_cpd_npgo_sst$save_object(here("stan models","outs","fits","ric_chm_cpd_npgo_ersst_cc.RDS"))
post_ric_chm_cpd_npgo_sst=ric_chm_cpd_npgo_sst$draws(variables=c('b_for','b_for_cu','b_for_rv',
'b_npgo','b_npgo_cu','b_npgo_rv',
'b_sst','b_sst_cu','b_sst_rv',
'alpha_j','k','k_rv','sigma'),format='draws_matrix')
write.csv(post_ric_chm_cpd_npgo_sst,here('stan models','outs','posterior','ric_chm_cpd_npgo_ersst_cc.csv'))
}
post_ric_chm_cpd_npgo_sst <- as.array(cpd)
mcmc_trace(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_intervals(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_areas(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_hist(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
mcmc_trace(post_ric_chm_cpd_npgo_sst, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst_pdo.csv'))
mcmc_trace(cpd, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst.csv'))
mcmc_trace(cpd, pars = c('b_for'))
cpd <- read.csv(here('stan models','outs','posterior','bh_chm_cpd_npgo_ersst_pdo.csv'))
rhat(ric_chm_cpd_npgo_sst)
rhat(ric_chm_cpd_npgo_sst)$b_for
eca_summary <- read.csv(here('stan models','outs','summary','bh_chm_eca_npgo_ersst_pdo.csv'))
eca_summary %>%
select(variable, rhat) %>%
summarise(mean(rhat))
eca_summary %>%
select(variable, rhat)
eca_summary %>%
select(variable, rhat) %>%
filter(variable == 'b_for')
eca_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.1)
cpd_summary <- read.csv(here('stan models','outs','summary','bh_chm_cpd_npgo_ersst_pdo.csv'))
cpd_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.1)
knitr::opts_chunk$set(warning = FALSE, echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(cache=FALSE)
options(max.print=23)
library(cmdstanr)
library(here);library(dplyr); library(stringr)
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(hues)
library(GGally)
library(latex2exp)
library(ggforce)
bh_pk_eca_correct=read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_eca_noac_corrected.csv'),check.names=F)
bh_pk_cpd_correct=read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_cpd_noac_corrected.csv'),check.names=F)
bh_pk_eca_st_correct=read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_eca_st_noac_corrected.csv'),check.names=F)
bh_pk_cpd_st_correct=read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_cpd_st_noac_corrected.csv'),check.names=F)
bh_pk_cpd_ersst_correct = read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_cpd_noac_w_npgo_ersst_corrected.csv'),check.names=F)
bh_pk_eca_ersst_correct = read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_eca_noac_w_npgo_ersst_corrected.csv'),check.names=F)
(plot_forestry_effect(posterior = bh_pk_eca_st_correct, effect = "eca", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_st_correct, effect = "cpd", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)))/(plot_forestry_effect(posterior = bh_pk_eca_correct, effect = "eca", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_correct, effect = "cpd", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)))/(plot_forestry_effect(posterior = bh_pk_eca_ersst_correct, effect = "eca", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_ersst_correct, effect = "cpd", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5))) + plot_layout(guides = "collect")
(plot_forestry_effect(posterior = bh_pk_eca_st_correct, effect = "eca", species = "pink", model = "BH model with ECA", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_st_correct, effect = "cpd", species = "pink", model = "BH model with CPD", xlim = c(-0.5,0.5)))/(plot_forestry_effect(posterior = bh_pk_eca_correct, effect = "eca", species = "pink", model = "BH model with ECA,\ncoastwide productivity", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_correct, effect = "cpd", species = "pink", model = "BH model with CPD,\ncoastwide productivity", xlim = c(-0.5,0.5)))/(plot_forestry_effect(posterior = bh_pk_eca_ersst_correct, effect = "eca", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5)) + plot_forestry_effect(posterior = bh_pk_cpd_ersst_correct, effect = "cpd", species = "pink", model = "BH model with NPGO, ERSST", xlim = c(-0.5,0.5))) + plot_layout(guides = "collect")
bh_pk_eca_correct=read.csv(here('stan models',
'outs',
'posterior',
'bh_pk_eca_noac_corrected.csv'),check.names=F)
mcmc_trace(bh_pk_eca_correct, pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[1:200,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[1:500,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[1:500,], pars = c('b_for'),facet_args = list(nrow = 2, labeller = label_parsed))
mcmc_trace(bh_pk_eca_correct %>%
mutate(chain = c(rep(1,500),rep(2,500),rep(3,500),rep(4,500),rep(5,500),rep(6,500))), pars = c('b_for'),
facet_args = list(nrow = 2, labeller = label_parsed))
mcmc_trace(bh_pk_eca_correct %>%
mutate("chain" = c(rep(1,500),rep(2,500),rep(3,500),rep(4,500),rep(5,500),rep(6,500))), pars = c('b_for'),
facet_args = list(nrow = 2, labeller = label_parsed))
mcmc_trace(bh_pk_eca_correct[501:1000,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[1001:1500,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[1501:2000,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[2001:2500,], pars = c('b_for'))
mcmc_trace(bh_pk_eca_correct[2501:3000,], pars = c('b_for'))
bh_pk_eca_summary <- read.csv(here('stan models','outs','summary','bh_pk_eca_noac_corrected.csv'))
bh_pk_eca_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.01)
bh_pk_eca_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.05)
bh_pk_eca_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.02)
(plot_sst_effect(posterior = bh_pk_cpd_ersst, effect = "sst", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_sst_effect(posterior = ric_pk_cpd_ersst, effect = "sst", species = "pink", model = "Ric model with CPD, NPGO, LH SST", color_by = "CU"))
(plot_sst_effect(posterior = bh_pk_cpd_ersst, effect = "sst", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_sst_effect(posterior = ric_pk_cpd_ersst, effect = "sst", species = "pink", model = "Ric model with CPD, NPGO, LH SST", color_by = "CU"))
(plot_sst_effect(posterior = bh_pk_cpd_ersst, effect = "sst", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_sst_effect(posterior = ric_pk_cpd_ersst, effect = "sst", species = "pink", model = "Ric model with CPD, NPGO, LH SST", color_by = "CU"))
(plot_sst_effect(posterior = bh_pk_cpd_ersst_correct, effect = "sst", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_sst_effect(posterior = ric_pk_cpd_ersst, effect = "sst", species = "pink", model = "Ric model with CPD, NPGO, LH SST", color_by = "CU"))
plot_npgo_effect(posterior = bh_pk_cpd_ersst, effect = "npgo", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_npgo_effect(posterior = ric_pk_cpd_ersst, effect = "npgo", species = "pink", model = "Ric model with CPD, NPGO, ERSST")
plot_npgo_effect(posterior = bh_pk_cpd_ersst_correct, effect = "npgo", species = "pink", model = "BH model with CPD, NPGO, ERSST") +
plot_npgo_effect(posterior = ric_pk_cpd_ersst, effect = "npgo", species = "pink", model = "Ric model with CPD, NPGO, ERSST")
ric_chm_eca_cc = read.csv(here('stan models','outs','posterior','ric_chm_eca_trial_cc.csv'),check.names=F)
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(here)
ric_chm_eca_cc = read.csv(here('stan models','outs','posterior','ric_chm_eca_trial_cc.csv'),check.names=F)
ric_chm_eca_cc = read.csv(here('stan models','outs','posterior','ric_chm_eca_static_trial_cc.csv'),check.names=F)
mcmc_trace(ric_chm_ecacc, pars = c('b_for'))
mcmc_trace(ric_chm_eca_cc, pars = c('b_for'))
ric_chm_eca_cc_summary <- read.csv(here('stan models','outs','summary','ric_chm_eca_static_trial_cc.csv'))
ric_chm_eca_cc_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.01)
ric_chm_eca_cc_summary %>%
select(variable, rhat) %>%
filter(rhat > 1.1)
knitr::opts_chunk$set(warning = FALSE, echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(cache=FALSE)
options(max.print=23)
library(cmdstanr)
library(here);library(dplyr); library(stringr)
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(hues)
library(GGally)
library(latex2exp)
library(ggforce)
ric_chm_eca_st_cc = read.csv(here('stan models','outs','posterior','ric_chm_eca_static_trial_cc.csv'),check.names=F)
plot_forestry_effect(posterior = ric_chm_eca_st_cc, effect = "eca", species = "chum", model = "Ricker model with ECA on k", xlim = c(-3,3))
knitr::opts_chunk$set(warning = FALSE, echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(cache=FALSE)
options(max.print=23)
library(cmdstanr)
library(here);library(dplyr); library(stringr)
library(ggplot2)
library(tidyverse)
library(bayesplot)
library(patchwork)
library(hues)
library(GGally)
library(latex2exp)
posterior_bh = read.csv(here('stan models','outs','posterior','bh_chm_cpd_static_cc.csv'),check.names=F)
posterior = read.csv(here('stan models','outs','posterior','ric_chm_cpd_npgo_ersst_cc2.csv'),check.names=F)
river = 52
river_data <- ch20rsc %>% filter(River_n == river)
posterior %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river,"]")))
posterior %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river,"]")))
posterior %>%
select(starts_with('k')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh %>%
select(starts_with('k')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_bh %>%
select(starts_with('k')) %>%
select(ends_with(paste0("[",river,"]")))
View(posterior_bh)
posterior_bh %>%
select(starts_with('Rk')) %>%
select(ends_with(paste0("[",river,"]")))
low_cpd <- min(river_data$sqrt.CPD.std)
high_cpd <- max(river_data$sqrt.CPD.std)
# avg_cpd <- mean(river_data$sqrt.CPD.std)
mid_cpd <- min(river_data$sqrt.CPD.std) + (max(river_data$sqrt.CPD.std) - min(river_data$sqrt.CPD.std))/2
mid_cpd_real <- min(river_data$disturbedarea_prct_cs) + (max(river_data$disturbedarea_prct_cs) - min(river_data$disturbedarea_prct_cs))/2
ric_chm_cpd_st_cc = read.csv(here('stan models','outs','posterior','ric_chm_cpd_static_trial_cc.csv'),check.names=F)
((plot_forestry_effect(posterior = ric_chm_eca_st_cc, effect = "eca", species = "chum", model = "Ricker model with ECA on k", xlim = c(-3,3)) + plot_forestry_effect(posterior = ric_chm_cpd_st_cc, effect = "cpd", species = "chum", model = "Ricker model with CPD on k", xlim = c(-3,3)))/(plot_forestry_effect(posterior = ric_chm_eca_st, effect = "eca", species = "chum", model = "Ricker model without coastwide productivity", xlim = c(-3,3)) +
plot_forestry_effect(posterior = ric_chm_cpd_st, effect = "cpd", species = "chum", model = "Ricker model without coastwide productivity", xlim = c(-3,3))) + plot_layout(guides = "collect"))
exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) -
as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
spawners_predicted <- seq(0, max(river_data$Spawners), length.out = 100)
low_cpd <- min(river_data$sqrt.CPD.std)
high_cpd <- max(river_data$sqrt.CPD.std)
# avg_cpd <- mean(river_data$sqrt.CPD.std)
mid_cpd <- min(river_data$sqrt.CPD.std) + (max(river_data$sqrt.CPD.std) - min(river_data$sqrt.CPD.std))/2
mid_cpd_real <- min(river_data$disturbedarea_prct_cs) + (max(river_data$disturbedarea_prct_cs) - min(river_data$disturbedarea_prct_cs))/2
exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) -
as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))
matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted)
posterior_rv_k <- posterior %>%
select(starts_with('k')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_k
posterior_rv_b_for <- posterior %>%
select(starts_with('b_for_rv')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_alpha_j <- posterior %>%
select(starts_with('alpha_j')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_k <- posterior %>%
select(starts_with('k')) %>%
select(ends_with(paste0("[",river,"]")))
posterior_rv_k
matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted)
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted), 2, median))*spawners_predicted
spawners_predicted
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted), 2, median))
posterior_rv_k
posterior_bh %>%
select(starts_with('Rk')) %>%
select(ends_with(paste0("[",river,"]")))
spawner_scale=10^floor(log10(max(ch20rsc$Spawners)))
ch20rsc$Spawners_Scaled <- ch20rsc$Spawners/spawner_scale
river_data <- ch20rsc %>% filter(River_n == river)
spawners_predicted <- seq(0, max(river_data$Spawners_Scaled), length.out = 100)
spawners_predicted
as.matrix(1/posterior_rv_k)
as.matrix(1/posterior_rv_k)%*%spawners_predicted
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted), 2, median))*spawners_predicted
as.matrix(1/posterior_rv_k)%*%spawners_predicted
apply(as.matrix(1/posterior_rv_k)%*%spawners_predicted),2,median)
apply(as.matrix(1/posterior_rv_k)%*%spawners_predicted,2,median)
spawners_predicted_scaled <- seq(0, max(river_data$Spawners_Scaled), length.out = 100)
spanwers_predicted <- seq(0, max(river_data$Spawners), length.out = 100)
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted_scaled), 2, median))*spawners_predicted
spawners_predicted
max(river_data$Spawners)
spanwers_predicted <- seq(0, max(river_data$Spawners), length.out = 100)
spawners_predicted_scaled <- seq(0, max(river_data$Spawners_Scaled), length.out = 100)
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted_scaled), 2, median))*spawners_predicted
spawners_predicted
seq(0, max(river_data$Spawners), length.out = 100)
spawners_predicted <- seq(0, max(river_data$Spawners), length.out = 100)
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted_scaled), 2, median))*spawners_predicted
recruits_predicted <- exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted_scaled), 2, median))*spawners_predicted
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 - as.matrix(1/posterior_rv_k)%*%spawners_predicted_scaled), 2, median))*spawners_predicted
matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))
apply(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])), 2, median)
exp(apply(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])), 2, median))
matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))exp()
exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))
apply(exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))),2,median)
exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))
)
posterior_rv_k*exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))
exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))
1/exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])))
as.matrix(1/exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))))
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 -  k_rv_inv%*%spawners_predicted_scaled), 2, median))*spawners_predicted
# recruits_predicted <- exp(apply((matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1])) -
#                                    as.matrix(1/posterior_rv_S_max)%*%spawners_predicted  + matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))), 2, median))*spawners_predicted
#
k_rv_inv = as.matrix(1/exp(matrix(posterior_rv_b_for[,1]*mid_cpd, ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))))
exp(apply(matrix(posterior_rv_alpha_j[,1], ncol = length(spawners_predicted), nrow = length(posterior_rv_alpha_j[,1]))*(1 -  k_rv_inv%*%spawners_predicted_scaled), 2, median))*spawners_predicted
